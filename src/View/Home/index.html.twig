{% extends 'layout.html.twig' %}

{% block content %}

    <div class="picture-box">
        <div class="picture-title">
            <i class="fa fa-ship logo" aria-hidden="true"></i>
            <h1 class="sea-blue"> Marine Forecast For Pirates </h1>
            <p class="sea-blue italic-style">Keep a weather eye on the horizon! </p>
        </div>
        <div class="header-picture">
            <a href="/position/destroy"><img class="sparrow" src="/assets/images/sparrow.jpg" alt="jack sparrow"> </a>
        </div>
    </div>

    <div class="container-weather-card">
        {% if time_error %}

        {% else %}
         {% if (session.departurelat) %}
            <div class="departure">
                <h3>Marine forecast for departure, leaving in {{ days_dep}} days and {{ hours_dep}} hours </h3>
                {% set table_to_use = weather_data_leave  %}
                {% set astronomy_to_use = astronomy_data_leave  %}

                <ul>
                    <li> <i class="fa fa-thermometer-half" aria-hidden="true"></i>
                        Air temperature: {{ table_to_use.airTemperature.sg }} °C </li>
                    <li> <i class="fa fa-cloud" aria-hidden="true"></i>
                        Cloud cover:  {{ table_to_use.cloudCover.sg }} % </li>
                    <li>  <i class="fa fa-area-chart" aria-hidden="true"></i>
                        Ice cover: {{ table_to_use.iceCover.sg }} | on a scale of 0-1</li>
                    <li>  <i class="fa fa-tint" aria-hidden="true"></i>
                        Precipitation: {{ table_to_use.precipitation.sg }} kg / m²</li>
                    <li><i class="fa fa-binoculars" aria-hidden="true"></i>
                        Visibility: {{ table_to_use.visibility.sg }} km</li>
                    <li>  <i class="fa fa-thermometer-half" aria-hidden="true"></i>
                        Water temperature: {{ table_to_use.waterTemperature.sg }} °C </li>
                    <li><img class="small-icon" src="/assets/images/002-wave.svg" alt=""> Wave height: {{ table_to_use.waveHeight.sg }} m</li>
                    <li> <img  class="small-icon" src="/assets/images/003-sunset.svg" alt="">
                        Sunrise: {{ astronomy_to_use.sunrise }} [GMT]</li>
                    <li>  <i class="fa fa-moon-o" aria-hidden="true"></i>
                        Moon phase: {{ astronomy_to_use.moonPhase.closest.text }} </li>
                    <li> <img class="small-icon"  src="/assets/images/003-sunset.svg" alt="">  Sunset: {{ astronomy_to_use.sunset }} [GMT]</li>
                </ul>
                <div class="compass-box">
                    <div class="compass-container">
                        <div class="compass">
                            <span>N</span>
                            <span>E</span>
                            <span>S</span>
                            <span>W</span>
                            <div class="pointer" style="transform: rotate({{ current_direction_departure }}deg);"></div>
                        </div>
                        <p> Current speed: {{ current_speed_departure }} knot</p>
                    </div>
                    <div class="compass-container">
                        <div class="compass">
                            <span>N</span>
                            <span>E</span>
                            <span>S</span>
                            <span>W</span>
                            <div class="pointer" style="transform: rotate({{ wind_direction_departure }}deg);"></div>
                        </div>
                        <p> Wind speed: {{ wind_speed_departure }} knot</p>
                    </div>
                </div>
            </div>
        {% endif %}
        {% endif %}
        <div class="map">
            <p class="sea-blue choose-location"><i class="fa fa-arrow-right"></i>  Choose your current location and your destination on the map </p>
            <div id="map">
                <!-- Ici s'affichera la carte -->
            </div>
            <div class="form-container">
                <p class="sea-blue"><i class="fa fa-arrow-right"></i> Set the departure and arrival time </p>
                <p class="time-error">{{ time_error }} </p>
                <form action="/api/getweather" method="post">
                    <div class="time-container"><label class="sea-blue" for="leave">Departure time: </label> <input class="sea-blue" type="datetime-local" name="leave" id="leave"></div>
                    <div class="time-container"><label class="sea-blue" for="arrive">Arrival time: </label> <input  class="sea-blue" type="datetime-local" name="arrive" id="arrive"></div>
                    <div class="letsgo">
                        <p class="sea-blue"><i class="fa fa-arrow-right"></i> Let's see the marine forecast</p>
                        <button class="button-submission" type="submit"> Let's go</button>
                    </div>
                </form>
            </div>
        </div>
        {% if time_error %}
        {% else %}
        {% if (session.departurelat) %}
            <div class="destination">
                <h3>Marine forecast for destination, arriving in {{ days_dest}} days and {{ hours_dest}} hours </h3>
                {% set table_to_use = weather_data_dest  %}
                {% set astronomy_to_use = astronomy_data_dest  %}
                <ul>
                    <li> <i class="fa fa-thermometer-half" aria-hidden="true"></i>
                        Air temperature: {{ table_to_use.airTemperature.sg }} °C </li>
                    <li>  <i class="fa fa-cloud" aria-hidden="true"></i>
                        Cloud cover: {{ table_to_use.cloudCover.sg }} % </li>
                    <li>  <i class="fa fa-area-chart" aria-hidden="true"></i>
                        Ice cover: {{ table_to_use.iceCover.sg }}  | on a scale of 0-1</li>
                    <li> <i class="fa fa-tint" aria-hidden="true"></i> Precipitation: {{ table_to_use.precipitation.sg }} kg / m²</li>
                    <li><i class="fa fa-binoculars" aria-hidden="true"></i>
                        Visibility: {{ table_to_use.visibility.sg }} km </li>
                    <li>  <i class="fa fa-thermometer-half" aria-hidden="true"></i>
                        Water temperature: {{ table_to_use.waterTemperature.sg }} °C </li>
                    <li>  <img class="small-icon" src="/assets/images/002-wave.svg" alt=""> Wave height: {{ table_to_use.waveHeight.sg }} m</li>
                    <li> <img  class="small-icon" src="/assets/images/003-sunset.svg" alt="">
                        Sunrise:  {{ astronomy_to_use.sunrise }} [GMT]</li>
                    <li><i class="fa fa-moon-o" aria-hidden="true"></i>
                        Moon phase: {{ astronomy_to_use.moonPhase.closest.text }}</li>
                    <li>  <img class="small-icon"  src="/assets/images/003-sunset.svg" alt="">  Sunset: {{ astronomy_to_use.sunset }} [GMT]</li>
                </ul>
                <div class="compass-box">
                    <div class="compass-container">
                        <div class="compass">
                            <span>N</span>
                            <span>E</span>
                            <span>S</span>
                            <span>W</span>
                            <div class="pointer" style="transform: rotate({{ current_direction_destination }}deg);"></div>
                        </div>
                        <p> Current speed: {{ current_speed_destination }} knot</p>
                    </div>
                    <div class="compass-container">
                        <div class="compass">
                            <span>N</span>
                            <span>E</span>
                            <span>S</span>
                            <span>W</span>
                            <div class="pointer" style="transform: rotate({{ wind_direction_destination }}deg);"></div>
                        </div>
                        <p> Wind speed: {{ wind_speed_destination }} knot</p>
                    </div>
                </div>
            </div>
        {% endif %}
        {% endif %}
    </div>


    <div class="ocean">
        <div class="wave"></div>
        <div class="wave"></div>
    </div>


    <script src="https://unpkg.com/leaflet@1.3.4/dist/leaflet.js"></script>

    <script>
        window.addEventListener( "load", function( event ) {
            var map = L.map( 'map' /* the id of the tag used for map injection */ );
            map.setView( [16.636, /*latitude*/-74.575/*longitude*/], 3 /*zoom*/ );


            // --- We add a layer based on OpenStreetMap ---
            L.tileLayer( 'http://tile.openstreetmap.org/{z}/{x}/{y}.png' ).addTo(map);   // Base Map



            var counter = 0;
            var where="departure";
            var line = L.polyline([]).addTo(map);

            function onMapClick(e) {
                if (counter < 2 )  {
                    console.log(e.latlng);
                    if (counter === 0) {
                        marker = new L.marker(e.latlng);
                    } else {
                        marker = new L.marker(e.latlng, {draggable:'true'});
                    }
                    marker.on('dragend', function(event){
                        console.log(e.latlng);
                        var marker = event.target;
                        var position = marker.getLatLng();
                        marker.setLatLng(new L.LatLng(position.lat, position.lng),{draggable:'true'});
                        map.panTo(new L.LatLng(position.lat, position.lng));

                    })
                        .bindPopup("Lat, Lon : " + e.latlng.lat + ", " + e.latlng.lng);
                    map.addLayer(marker);
                    line.addLatLng(e.latlng);
                    console.log(line);
                }
                fetch('/position/add', {
                    method: 'POST',
                    headers: {
                        'Accept' : 'application/json',
                        'Content-type' : 'application/json'
                    },
                    body: JSON.stringify({
                        'lat': e.latlng.lat,
                        'long': e.latlng.lng,
                        'where': where,
                    })
                })
                    .then(response => response.json());

                where="destination";
                counter += 1;
            };

            map.on('click', onMapClick);


            {% if session.departurelat %}
            var departure = L.marker( [{{ session.departurelat }},{{ session.departurelong }} ] )
                    {% if days_dep == '0' %}
                    .bindPopup( 'Departure leaving in {{ hours_dep }} hours ' ),
                    {% else %}
                .bindPopup( 'Departure leaving in {{ days_dep }} days and {{ hours_dep }} hours ' ),
                    {% endif %}
                destination      = L.marker( [ {{ session.destinationlat }},{{ session.destinationlong }} ] )
                {% if days_dest == '0' %}
                    .bindPopup( 'Departure leaving in {{ hours_dest }} hours ' );
            {% else %}
        .bindPopup( 'Destination arriving in {{ days_dest}} days and {{ hours_dest}} hours' );
            {% endif %}

            L.layerGroup([departure, destination])
                .addTo( map );
            var lineToKeep = L.polyline([[{{ session.departurelat }},{{ session.departurelong }} ],[ {{ session.destinationlat }},{{ session.destinationlong }} ]]).addTo(map);
            {% endif %}

        });
    </script>

    {% block javascript %}{% endblock %}
    <script src="/assets/js/nav.js"></script>



{% endblock %}